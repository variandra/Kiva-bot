#BlueJ class context
comment0.target=Kiva
comment0.text=\r\n\ A\ Kiva\ is\ a\ simulated\ robo\ to\ move\ around\ and\ interact\ with\ a\ FloorMap\ to\ acomplish\ tasks\ such\ as\ moving\ Pods\ from\ one\ area\ to\ another\ using\ KivaCommand's.\r\n\ \r\n\ @author\ Kyle\ Gunn\r\n\ @version\ 1.0\r\n
comment1.params=floorMap
comment1.target=Kiva(FloorMap)
comment1.text=\r\n\ Kiva's\ have\ two\ ways\ to\ create\ them.\ This\ first\ way\ only\ requires\ a\ FloorMap\ that\ already\ has\ a\ Kiva's\ starting\ position\ defined.\r\n\ @param\ floorMap\ This\ is\ a\ FloorMap\ that\ should\ include\ a\ initial\ Kiva\ location,\ Pod\ locations\ and\ drop\ zone\ locations\ along\ with\ walls\ and\ obstacles.\r\n\ \r\n
comment10.params=location
comment10.target=boolean\ moveValidator(edu.duke.Point)
comment11.params=currentLocation
comment11.target=boolean\ takeValidator(edu.duke.Point)
comment12.params=location
comment12.target=boolean\ dropValidator(edu.duke.Point)
comment13.params=
comment13.target=edu.duke.Point\ forwardChecker()
comment14.params=
comment14.target=void\ motorUpdate()
comment15.params=
comment15.target=void\ forward()
comment16.params=
comment16.target=void\ right()
comment17.params=
comment17.target=void\ left()
comment18.params=
comment18.target=void\ take()
comment19.params=
comment19.target=void\ drop()
comment2.params=floorMap\ initialLocation
comment2.target=Kiva(FloorMap,\ edu.duke.Point)
comment2.text=\r\n\ Kiva's\ have\ two\ ways\ to\ create\ them.\ This\ Second\ way\ \ requires\ a\ FloorMap\ AND\ a\ edu.duke.Point\ for\ the\ Kiva's\ starting\ position.\r\n\ @param\ floorMap\ This\ is\ a\ FloorMap\ that\ should\ include\ a\ Pod\ locations\ and\ drop\ zone\ locations\ along\ with\ walls\ and\ obstacles.\r\n\ @param\ initialLocation\ is\ a\ Point\ that\ gives\ the\ Kiva\ its\ starting\ position.\r\n\ \r\n
comment3.params=
comment3.target=edu.duke.Point\ getCurrentLocation()
comment3.text=\r\n\ A\ method\ to\ return\ the\ kiva's\ current\ location\ as\ a\ Point.\r\n\ @return\ Returns\ a\ Point\ with\ an\ X\ and\ Y\ coordinate.\r\n
comment4.params=
comment4.target=FacingDirection\ getDirectionFacing()
comment4.text=\r\n\ A\ method\ to\ return\ the\ kiva's\ current\ facing\ direction\ as\ a\ FacingDirection\ enum\ constant.\r\n\ @return\ Returns\ a\ enum\ constant\ in\ all\ capital\ letter\ as\ standard\ in\ enum\ constants.\r\n
comment5.params=
comment5.target=boolean\ isCarryingPod()
comment5.text=\r\n\ A\ method\ to\ determine\ if\ the\ kiva\ is\ currently\ carring\ a\ pod\r\n\ @return\ Returns\ a\ boolean\ on\ if\ the\ kiva\ is\ carrying\ a\ pod.\r\n
comment6.params=
comment6.target=boolean\ isSuccessfullyDropped()
comment6.text=\r\n\ A\ method\ that\ discribes\ if\ the\ Kiva\ has\ made\ a\ successfull\ pod\ drop.\r\n\ @return\ Returns\ a\ boolean\ on\ if\ the\ kiva\ successfully\ dropped\ a\ pod\ in\ a\ drop\ zone.\r\n
comment7.params=a\ b
comment7.target=boolean\ sameLocation(edu.duke.Point,\ edu.duke.Point)
comment8.params=
comment8.target=long\ getMotorLifetime()
comment8.text=\r\n\ A\ method\ that\ returns\ how\ long\ the\ motor\ has\ ran.\r\n\ @return\ Returns\ a\ long\ to\ state\ in\ milliseconds\ the\ time\ the\ motor\ has\ been\ on.\r\n
comment9.params=command
comment9.target=void\ move(KivaCommand)
comment9.text=\r\n\ This\ is\ the\ core\ movement\ method\ for\ the\ kiva.\ once\ a\ command\ has\ been\ sent\ here\ this\ function\ will\ \r\n\ @param\ command\ takes\ a\ KivaCommand\ enum\ and\ does\ that\ command.\ If\ the\ command\ is\ invalid\ it\ throws\ an\ error.\r\n
numComments=20
